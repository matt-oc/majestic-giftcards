"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const fs = __importStar(require("fs-extra"));
const path = __importStar(require("path"));
const os = __importStar(require("os"));
const cross_spawn_promise_1 = require("@malept/cross-spawn-promise");
const checksum_1 = require("./helpers/checksum");
const rebuild_1 = require("./helpers/rebuild");
const electron_version_1 = require("./helpers/electron-version");
const rebuild_2 = require("../src/rebuild");
const MINUTES_IN_MILLISECONDS = 60 * 1000;
const testElectronVersion = electron_version_1.getExactElectronVersionSync();
describe('rebuilder', () => {
    const testModulePath = path.resolve(os.tmpdir(), 'electron-rebuild-test');
    const timeoutMinutes = process.platform === 'win32' ? 5 : 2;
    const msvs_version = process.env.GYP_MSVS_VERSION;
    const resetMSVSVersion = () => {
        if (msvs_version) {
            process.env.GYP_MSVS_VERSION = msvs_version;
        }
    };
    const resetTestModule = async () => {
        await fs.remove(testModulePath);
        await fs.mkdirs(testModulePath);
        await fs.copy(path.resolve(__dirname, '../test/fixture/native-app1/package.json'), path.resolve(testModulePath, 'package.json'));
        await cross_spawn_promise_1.spawn('npm', ['install'], { cwd: testModulePath });
        resetMSVSVersion();
    };
    const cleanupTestModule = async () => {
        await fs.remove(testModulePath);
        resetMSVSVersion();
    };
    describe('core behavior', function () {
        this.timeout(timeoutMinutes * MINUTES_IN_MILLISECONDS);
        before(async () => {
            await resetTestModule();
            process.env.ELECTRON_REBUILD_TESTS = 'true';
            await rebuild_2.rebuild({
                buildPath: testModulePath,
                electronVersion: testElectronVersion,
                arch: process.arch
            });
        });
        it('should have rebuilt top level prod dependencies', async () => {
            await rebuild_1.expectNativeModuleToBeRebuilt(testModulePath, 'ref-napi');
        });
        it('should have rebuilt top level prod dependencies that are using prebuild', async () => {
            await rebuild_1.expectNativeModuleToBeRebuilt(testModulePath, 'farmhash');
        });
        it('should have rebuilt children of top level prod dependencies', async () => {
            await rebuild_1.expectNativeModuleToBeRebuilt(testModulePath, 'leveldown');
        });
        it('should have rebuilt children of scoped top level prod dependencies', async () => {
            await rebuild_1.expectNativeModuleToBeRebuilt(testModulePath, '@newrelic/native-metrics');
        });
        it('should have rebuilt top level optional dependencies', async () => {
            await rebuild_1.expectNativeModuleToBeRebuilt(testModulePath, 'bcrypt');
        });
        it('should not have rebuilt top level devDependencies', async () => {
            await rebuild_1.expectNativeModuleToNotBeRebuilt(testModulePath, 'ffi-napi');
        });
        it('should not download files in the module directory', async () => {
            const modulePath = path.resolve(testModulePath, 'node_modules/ref-napi');
            const fileNames = await fs.readdir(modulePath);
            chai_1.expect(fileNames).to.not.contain(testElectronVersion);
        });
        after(async () => {
            delete process.env.ELECTRON_REBUILD_TESTS;
            await cleanupTestModule();
        });
    });
    describe('force rebuild', function () {
        this.timeout(timeoutMinutes * MINUTES_IN_MILLISECONDS);
        before(resetTestModule);
        after(cleanupTestModule);
        afterEach(resetMSVSVersion);
        const buildPath = testModulePath;
        const electronVersion = testElectronVersion;
        const arch = process.arch;
        const extraModules = [];
        it('should skip the rebuild step when disabled', async () => {
            await rebuild_2.rebuild({ buildPath, electronVersion, arch });
            resetMSVSVersion();
            const rebuilder = rebuild_2.rebuild({ buildPath, electronVersion, arch, extraModules, force: false });
            let skipped = 0;
            rebuilder.lifecycle.on('module-skip', () => {
                skipped++;
            });
            await rebuilder;
            chai_1.expect(skipped).to.equal(5);
        });
        it('should rebuild all modules again when disabled but the electron ABI changed', async () => {
            await rebuild_2.rebuild({ buildPath, electronVersion, arch });
            resetMSVSVersion();
            const rebuilder = rebuild_2.rebuild({ buildPath, electronVersion: '3.0.0', arch, extraModules, force: false });
            let skipped = 0;
            rebuilder.lifecycle.on('module-skip', () => {
                skipped++;
            });
            await rebuilder;
            chai_1.expect(skipped).to.equal(0);
        });
        it('should rebuild all modules again when enabled', async function () {
            if (process.platform === 'darwin') {
                this.timeout(5 * MINUTES_IN_MILLISECONDS);
            }
            await rebuild_2.rebuild({ buildPath, electronVersion, arch });
            resetMSVSVersion();
            const rebuilder = rebuild_2.rebuild({ buildPath, electronVersion, arch, extraModules, force: true });
            let skipped = 0;
            rebuilder.lifecycle.on('module-skip', () => {
                skipped++;
            });
            await rebuilder;
            chai_1.expect(skipped).to.equal(0);
        });
    });
    describe('only rebuild', function () {
        this.timeout(2 * MINUTES_IN_MILLISECONDS);
        beforeEach(resetTestModule);
        afterEach(cleanupTestModule);
        it('should rebuild only specified modules', async () => {
            const nativeModuleBinary = path.join(testModulePath, 'node_modules', 'farmhash', 'build', 'Release', 'farmhash.node');
            const nodeModuleChecksum = await checksum_1.determineChecksum(nativeModuleBinary);
            const rebuilder = rebuild_2.rebuild({
                buildPath: testModulePath,
                electronVersion: testElectronVersion,
                arch: process.arch,
                onlyModules: ['farmhash'],
                force: true
            });
            let built = 0;
            rebuilder.lifecycle.on('module-done', () => built++);
            await rebuilder;
            chai_1.expect(built).to.equal(1);
            const electronModuleChecksum = await checksum_1.determineChecksum(nativeModuleBinary);
            chai_1.expect(electronModuleChecksum).to.not.equal(nodeModuleChecksum);
        });
        it('should rebuild multiple specified modules via --only option', async () => {
            const rebuilder = rebuild_2.rebuild({
                buildPath: testModulePath,
                electronVersion: testElectronVersion,
                arch: process.arch,
                onlyModules: ['ffi-napi', 'ref-napi'],
                force: true
            });
            let built = 0;
            rebuilder.lifecycle.on('module-done', () => built++);
            await rebuilder;
            chai_1.expect(built).to.equal(2);
        });
    });
    describe('debug rebuild', function () {
        this.timeout(10 * MINUTES_IN_MILLISECONDS);
        before(resetTestModule);
        after(cleanupTestModule);
        it('should have rebuilt ffi-napi module in Debug mode', async () => {
            await rebuild_2.rebuild({
                buildPath: testModulePath,
                electronVersion: testElectronVersion,
                arch: process.arch,
                onlyModules: ['ffi-napi'],
                force: true,
                debug: true
            });
            await rebuild_1.expectNativeModuleToBeRebuilt(testModulePath, 'ffi-napi', { buildType: 'Debug' });
            await rebuild_1.expectNativeModuleToNotBeRebuilt(testModulePath, 'ffi-napi');
        });
    });
    describe('useElectronClang rebuild', function () {
        this.timeout(10 * MINUTES_IN_MILLISECONDS);
        before(resetTestModule);
        after(cleanupTestModule);
        it('should have rebuilt ffi-napi module using clang mode', async () => {
            await rebuild_2.rebuild({
                buildPath: testModulePath,
                electronVersion: testElectronVersion,
                arch: process.arch,
                onlyModules: ['ffi-napi'],
                force: true,
                useElectronClang: true
            });
            await rebuild_1.expectNativeModuleToBeRebuilt(testModulePath, 'ffi-napi');
        });
    });
});
//# sourceMappingURL=rebuild.js.map